// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repositories.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	address "github.com/HomesNZ/buyer-demand/internal/repository/address"
	address0 "github.com/HomesNZ/buyer-demand/internal/repository/buyer_demand"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositories is a mock of Repositories interface.
type MockRepositories struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoriesMockRecorder
}

// MockRepositoriesMockRecorder is the mock recorder for MockRepositories.
type MockRepositoriesMockRecorder struct {
	mock *MockRepositories
}

// NewMockRepositories creates a new mock instance.
func NewMockRepositories(ctrl *gomock.Controller) *MockRepositories {
	mock := &MockRepositories{ctrl: ctrl}
	mock.recorder = &MockRepositoriesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositories) EXPECT() *MockRepositoriesMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockRepositories) Address() address.Repo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(address.Repo)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockRepositoriesMockRecorder) Address() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockRepositories)(nil).Address))
}

// BuyerDemand mocks base method.
func (m *MockRepositories) BuyerDemand() address0.Repo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyerDemand")
	ret0, _ := ret[0].(address0.Repo)
	return ret0
}

// BuyerDemand indicates an expected call of BuyerDemand.
func (mr *MockRepositoriesMockRecorder) BuyerDemand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyerDemand", reflect.TypeOf((*MockRepositories)(nil).BuyerDemand))
}
